# vim: foldmethod=marker foldlevel=0
# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #
# {{{
# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.
# }}}

# ############################################################### #
#                                                                 #
#                             YABAI                               #
#                        window-manager                           #
# ############################################################### #
# {{{ YABAI

#
# {{{ WINDOWS
#


# focus window
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east

# swap managed window
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east

# move managed window
shift + cmd - h : yabai -m window --warp west
shift + cmd - j : yabai -m window --warp south
shift + cmd - k : yabai -m window --warp north
shift + cmd - l : yabai -m window --warp east



## HALVES

# make floating window fill left-half of screen
shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# make floating window fill right-half of screen 
shift + alt - right  : yabai -m window --grid 1:2:1:1:0:0


## THIRDS

# make floating window fill left third of screen
ctrl + alt - d  : yabai -m window --grid 1:3:0:0:1:1

# make floating window fill left two-thirds of screen
ctrl + alt - e   : yabai -m window --grid 1:3:0:0:2:1

# make floating window fill center third of screen
ctrl + alt - f  : yabai -m window --grid 1:6:1:0:4:1

# make floating window fill center third of screen
# ctrl + alt - f  : yabai -m window --grid 1:3:1:0:1:1

# make floating window fill right two-thirds of screen
ctrl + alt - t  : yabai -m window --grid 1:3:1:0:2:1

# make floating window fill right third of screen
ctrl + alt - g  : yabai -m window --grid 1:3:2:0:1:1


# QUADRANTS

# make floating window fill top-left quadrant of screen
ctrl + alt - u  : yabai -m window --grid 2:2:0:0:1:1

# make floating window fill top-right quadrant of screen
ctrl + alt - i  : yabai -m window --grid 2:2:1:0:1:1

# make floating window fill bottom-left quadrant of screen
ctrl + alt - j  : yabai -m window --grid 2:2:0:1:1:1

# make floating window fill bottom-right quadrant of screen
ctrl + alt - k  : yabai -m window --grid 2:2:1:1:1:1

# make floating window centered on screen
shift + alt - c : yabai -m window --grid 4:4:1:1:2:2



# toggle window zoom
alt - d : yabai -m window --toggle zoom-parent
alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2 --layer below

# float / unfloat window
alt - t : yabai -m window --toggle float

# toggle sticky(+float), topmost, picture-in-picture
alt - p : yabai -m window --toggle sticky --toggle topmost --toggle pip

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# }}} WINDOWS

#
# {{{ SPACES
#

# create desktop and follow focus
ctrl + cmd - n : yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                  yabai -m space --focus "${index}"

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
shift + alt - space  : yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                  win_id="$(yabai -m query --windows --window | jq -r '.id')" && \
                  yabai -m window --space "${index}" && \
                  yabai -m window --focus "${win_id}"

# fast focus desktop
# shift + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to next space and follow focus
alt + cmd - n : win_id="$(yabai -m query --windows --window | jq -r '.id')" && \
                  yabai -m window --space next; yabai -m window --focus "${win_id}"
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# send window to previous space and follow focus
alt + cmd - p : win_id="$(yabai -m query --windows --window | jq -r '.id')" && \
                  yabai -m window --space prev; yabai -m window --focus "${win_id}"

# focus next/previous desktop
ctrl + cmd - right : yabai -m space --focus next || yabai -m space --focus first
ctrl + cmd - left : yabai -m space --focus prev || yabai -m space --focus last

# destroy space
shift + alt - d: yabai -m space --destroy

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase/decrease window size
ctrl + cmd - h : yabai -m window west --resize right:-20:0 2> /dev/null || yabai -m window --resize right:-20:0
ctrl + cmd - j : yabai -m window north --resize bottom:0:20 2> /dev/null || yabai -m window --resize bottom:0:20
ctrl + cmd - k : yabai -m window south --resize top:0:-20 2> /dev/null || yabai -m window --resize top:0:-20
ctrl + cmd - l : yabai -m window east --resize left:20:0 2> /dev/null || yabai -m window --resize left:20:0

# balance size of windows
shift + alt - 0 : yabai -m space --balance

# rotate window tree clockwise
alt - r : yabai -m space --rotate 270

# rotate window tree anti-clockwise
shift + alt - r : yabai -m space --rotate 90

# toggle mission-cotrl
ctrl + cmd - up : yabai -m space --toggle mission-control
# }}}

#
# {{{ DISPLAYS
#

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# }}} DISPLAYS

# }}} YABAI end


# ############################################################### #
#                                                                 #
#                             OTHER                               #
#                                                                 #
# ############################################################### #
